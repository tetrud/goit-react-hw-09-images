{"version":3,"sources":["components/Searchbar/Searchbar.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Loader/Loader.jsx","components/Button/Button.jsx","components/Modal/Modal.jsx","services/imagesApi.jsx","App.js","index.js"],"names":["Searchbar","onSubmit","useState","query","setQuery","className","event","preventDefault","trim","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","ImageGalleryItem","images","onClick","map","id","tags","webformatURL","largeImageURL","src","alt","ImageGallery","TailSpin","color","height","width","Button","text","Modal","largeImage","onClose","useEffect","window","addEventListener","handleKeyDown","once","code","target","searchQuery","currentPage","axios","get","then","response","data","hits","App","setImages","setCurrentPage","isLoading","setIsLoading","error","setError","showModal","setShowModal","setLargeImage","ImagesApi","prevImages","scrollTo","top","document","documentElement","scrollHeight","behavior","catch","message","finally","Loader","imageUrl","length","prevCurrentPage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.890f0390.chunk.js","sourcesContent":["import { useState } from 'react';\n\nimport './Searchbar.scss';\n\nexport default function Searchbar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleChange = event => {\n    setQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit(query.trim());\n    setQuery('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          value={query}\n          onChange={handleChange}\n        />\n      </form>\n    </header>\n  );\n}\n","import PropTypes from 'prop-types';\n\nimport './ImageGalleryItem.scss';\n\nconst ImageGalleryItem = ({ images, onClick }) => {\n  return images.map(({ id, tags, webformatURL, largeImageURL }) => (\n    <li key={id} className=\"ImageGalleryItem\">\n      <img\n        src={webformatURL}\n        alt={tags}\n        className=\"ImageGalleryItem-image\"\n        onClick={() => onClick(largeImageURL, tags)}\n      />\n    </li>\n  ));\n};\n\nImageGalleryItem.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import PropTypes from 'prop-types';\n\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\n\nimport './ImageGallery.scss';\n\nconst ImageGallery = ({ images, onClick }) => {\n  return (\n    <ul className=\"ImageGallery\">\n      <ImageGalleryItem images={images} onClick={onClick} />\n    </ul>\n  );\n};\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","import Loader from 'react-loader-spinner';\n\nconst TailSpin = () => {\n  return <Loader type=\"TailSpin\" color=\"#3f51b5\" height={80} width={80} />;\n};\n\nexport default TailSpin;\n","import PropTypes from 'prop-types';\nimport './Button.scss';\n\nconst Button = ({ text = '', type, onClick }) => {\n  return (\n    <button className=\"Button\" type={type} onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string,\n  type: PropTypes.node,\n};\n\nexport default Button;\n","import { useEffect } from 'react';\n\nimport './Modal.scss';\n\nexport default function Modal({ largeImage, alt, onClose }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, { once: true });\n  }, []);\n\n  const handleKeyDown = event => {\n    if (event.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n  return (\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\n      <div className=\"Modal\">\n        <img src={largeImage} alt={alt} />\n      </div>\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst apiKey = '17278300-7d16b91202e921c50b7326d3b';\n\nconst fetchImages = ({ searchQuery = '', currentPage = 1 }) => {\n  return axios\n    .get(\n      `https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=12`,\n    )\n    .then(response => response.data.hits);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { fetchImages };\n","import { useState, useEffect } from 'react';\n\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Loader from './components/Loader';\nimport Button from './components/Button';\nimport Modal from './components/Modal';\nimport ImagesApi from './services/imagesApi';\n\nexport default function App() {\n  const [images, setImages] = useState([]);\n  const [query, setQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [largeImage, setLargeImage] = useState('');\n  const [tags] = useState('');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    const fetchImages = () => {\n      setIsLoading(true);\n\n      ImagesApi.fetchImages({ searchQuery: query, currentPage })\n        .then(hits => {\n          setImages(prevImages => [...prevImages, ...hits]);\n          if (currentPage > 1) {\n            window.scrollTo({\n              top: document.documentElement.scrollHeight,\n              behavior: 'smooth',\n            });\n          }\n        })\n\n        .catch(error => setError(error.message))\n        .finally(() => setIsLoading(false));\n    };\n\n    fetchImages();\n  }, [currentPage, query]);\n\n  const updatePage = () => {\n    setCurrentPage(prevCurrentPage => prevCurrentPage + 1);\n  };\n\n  const openModal = imageUrl => {\n    setLargeImage(imageUrl);\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setLargeImage('');\n    setShowModal(false);\n  };\n\n  const onChangeQuery = query => {\n    setQuery(query);\n    setCurrentPage(1);\n    setImages([]);\n    setError(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <Searchbar onSubmit={onChangeQuery} />\n      {error && <h1>Images not found!</h1>}\n\n      {isLoading && <Loader />}\n\n      <ImageGallery images={images} onClick={openModal} />\n\n      {images.length > 0 && (\n        <Button type=\"button\" text=\"Load more\" onClick={updatePage} />\n      )}\n\n      {showModal && (\n        <Modal largeImage={largeImage} alt={tags} onClose={closeModal} />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}